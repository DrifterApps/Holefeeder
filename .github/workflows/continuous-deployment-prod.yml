name: Continous deployment PROD

on:
  push:
    branches: [ master ]
    
    paths-ignore:
      - 'proxy/**'
      - 'docs/**'
      - 'poc/**'
      - 'imports/**'
      - 'tools/**'

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
    - name: Set version
      id: version
      run: echo "##[set-output name=version;]$(date +'%y.%m').${{github.run_number}}"

  packageBudgetApi:
    runs-on: ubuntu-latest
    needs: version

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.201

    - name: Install dependencies
      run: dotnet restore ./src

    - name: Build sources
      run: dotnet publish /property:Version=${{ needs.version.outputs.version }} --no-restore --output ./publish/DrifterApps.Holefeeder.ServicesHosts.BudgetApi ./src/DrifterApps.Holefeeder.ServicesHosts.BudgetApi/DrifterApps.Holefeeder.ServicesHosts.BudgetApi.csproj

    - name: Docker login
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u DrifterApps --password-stdin

    - name: Package
      run: |
        docker build --pull -t docker.pkg.github.com/drifterapps/holefeeder/holefeeder-api:${{ needs.version.outputs.version }} -f docker/api.dockerfile .
        docker push docker.pkg.github.com/drifterapps/holefeeder/holefeeder-api:${{ needs.version.outputs.version }}

  packageBudgetUi:
    runs-on: ubuntu-latest
    needs: version

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '13.x'

    - name: Install dependencies
      run: npm install
      working-directory: ./src/DrifterApps.Holefeeder.Presentations.UI

    - name: Build sources
      run: npm run-script build -- --prod --aot=true --outputHashing=all --outputPath=../../publish/DrifterApps.Holefeeder.Presentations.UI --sourceMap=false
      working-directory: ./src/DrifterApps.Holefeeder.Presentations.UI

    - name: Docker login
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u DrifterApps --password-stdin

    - name: Package
      run: |
        docker build --pull -t docker.pkg.github.com/drifterapps/holefeeder/holefeeder-web:${{ needs.version.outputs.version }} -f docker/web.dockerfile .
        docker push docker.pkg.github.com/drifterapps/holefeeder/holefeeder-web:${{ needs.version.outputs.version }}

  Deploy:
    runs-on: ubuntu-latest
    needs: 
      - version
      - packageBudgetApi
      - packageBudgetUi

    steps:
    - uses: actions/checkout@v2

    - name: Create environment file
      run: |
        printf "VERSION=${{needs.version.outputs.version}}
        ENVIRONMENT=Production
        ENVIRONMENT_PREFIX=
        MONGO_ROOT_USER=${{secrets.MONGODB_ROOT_USER_PROD}}
        MONGO_ROOT_PASSWORD=${{secrets.MONGODB_ROOT_PASSWORD_PROD}}
        MONGO_HOLEFEEDERAPI_USER=${{secrets.MONGODB_HOLEFEEDERAPI_USER_PROD}}
        MONGO_HOLEFEEDERAPI_PASSWORD=${{secrets.MONGODB_HOLEFEEDERAPI_PASSWORD_PROD}}
        MONGO_DATABASE_NAME=${{secrets.DATABASE_NAME_PROD}}
        MONGO_DATABASE_AUTH=${{secrets.DATABASE_NAME_PROD}}
        MONGO_DATABASE_VOLUME=./data
        SEQ_ApiKey=${{secrets.SEQ_APIKEY}}
        GOOGLE_CLIENTID=${{secrets.GOOGLE_CLIENT_ID}}
        GOOGLE_AUTHORITY=https://accounts.google.com
        " > .env
      working-directory: ./docker

    - name: Copy file via scp
      uses: appleboy/scp-action@master
      env:
        HOST: ${{ secrets.PROD_WEB_SERVER }}
        USERNAME: ${{ secrets.PROD_WEB_SERVER_USER }}
        PORT: ${{ secrets.PROD_WEB_SERVER_PORT }}
        KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      with:
        source: "docker/docker-compose.yml,docker/.env"
        target: "holefeeder"
        strip_components: 1
     
    - name: Starting containers
      uses: appleboy/ssh-action@master
      env:
        HOST: ${{ secrets.PROD_WEB_SERVER }}
        USERNAME: ${{ secrets.PROD_WEB_SERVER_USER }}
        PORT: ${{ secrets.PROD_WEB_SERVER_PORT }}
        KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      with:
        script: |
          cd holefeeder
          echo Pull container
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u DrifterApps --password-stdin
          docker pull docker.pkg.github.com/drifterapps/holefeeder/holefeeder-api:${{ needs.version.outputs.version }}
          docker pull docker.pkg.github.com/drifterapps/holefeeder/holefeeder-web:${{ needs.version.outputs.version }}
          echo Pull standard containers
          # echo ${{ secrets.GITHUB_TOKEN }} | docker login -u DrifterApps --password-stdin
          docker pull mongo:latest
          echo Start containers
          docker-compose up --force-recreate --build -d
          echo Cleanup previous images
          docker image prune -f
