name: holefeeder ci/cd

on:
  pull_request:
    branches:
    - main
    - master

    paths-ignore:
    - 'proxy/**'
    - 'docs/**'

env:
  DOCKER_REGISTRY: docker.pkg.github.com/drifterapps/holefeeder

jobs:
  set-version:
    name: build version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.build-version.outputs.version }}

    steps:
    - name: set version
      id: build-version
      run: echo "##[set-output name=version;]$(date +'%y.%m').${{github.run_number}}" 

  build:
    name: build, test and package
    runs-on: ubuntu-latest
    needs: set-version
    env:
      VERSION: ${{ needs.set-version.outputs.version }}

    steps:
    - uses: actions/checkout@v2

    - name: docker login
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.DOCKER_REGISTRY }} -u DrifterApps --password-stdin

    - run: docker-compose pull
      working-directory: ./src

    - uses: satackey/action-docker-layer-caching@v0.0.11
      continue-on-error: true

    - name: build containers
      run: docker-compose build --build-arg holefeeder_version=${{ env.VERSION }}
      working-directory: ./src

    - name: budget api unit tests
      if: ${{ success() }}
      run: docker-compose -f docker-compose-tests.yml -f docker-compose-tests.override.yml run budgeting-api-unit-test
      working-directory: ./src

    - name: budgeting api functional tests
      if: ${{ success() }}
      run: docker-compose -f docker-compose-tests.yml -f docker-compose-tests.override.yml run budgeting-api-functional-test
      working-directory: ./src

    - name: object-store api unit tests
      if: ${{ success() }}
      run: docker-compose -f docker-compose-tests.yml -f docker-compose-tests.override.yml run object-store-api-unit-test
      working-directory: ./src

    - name: object-store api functional tests
      if: ${{ success() }}
      run: docker-compose -f docker-compose-tests.yml -f docker-compose-tests.override.yml run object-store-api-functional-test
      working-directory: ./src

    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1.6
      if: ${{ success() }}
      with:
        check_name: unit-test-results
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: src/tests-results/*.junit.xml

    - name: setup .NET core # Required to execute ReportGenerator
      uses: actions/setup-dotnet@v1
      if: ${{ always() }}
      with:
        dotnet-version: 5.0.101

    - name: report generator
      uses: danielpalme/ReportGenerator-GitHub-Action@4.8.3
      if: ${{ always() }}
      with:
        reports: 'src/tests-results/*/coverage.cobertura.xml'
        targetdir: 'coveragereport'
        sourcedirs: 'src/'
        reporttypes: 'HtmlInline;Cobertura'
        tag: '${{ github.run_number }}_${{ github.run_id }}'

    - name: upload coverage report artifacts
      uses: actions/upload-artifact@v1
      if: ${{ always() }}
      with:
        name: coverage-report
        path: coveragereport

    - name: push containers
      run: docker-compose push
      working-directory: ./src

  staging:
    name: deploy to staging
    runs-on: ubuntu-latest
    needs:
    - set-version
    - build
    env:
      VERSION: ${{ needs.set-version.outputs.version }}
      TARGET: holefeeder-staging
      ENVIRONMENT: Staging
      ENVIRONMENT_PREFIX: -staging
      HOLEFEEDER_EXTERNAL_DNS_NAME_OR_IP: holefeeder-staging.drifterapps.com
    environment:
      name: staging

    steps:
    - uses: actions/checkout@v2

    - name: create environment file
      run: |
        printf "VERSION=${{ env.VERSION }}
        DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
        ENVIRONMENT=${{ env.ENVIRONMENT }}
        ENVIRONMENT_PREFIX=${{ env.ENVIRONMENT_PREFIX }}
        HOLEFEEDER_EXTERNAL_DNS_NAME_OR_IP=${{ env.HOLEFEEDER_EXTERNAL_DNS_NAME_OR_IP }}
        MONGO_CONNECTION_STRING=mongodb://${{ secrets.MONGODB_HOLEFEEDERAPI_USER }}:${{ secrets.MONGODB_HOLEFEEDERAPI_PASSWORD }}@nosql-data/?authSource=holefeeder
        MONGO_ROOT_USER=${{ secrets.MONGODB_ROOT_USER }}
        MONGO_ROOT_PASSWORD=${{ secrets.MONGODB_ROOT_PASSWORD }}
        MONGO_DATABASE_NAME=holefeeder
        MONGO_DATABASE_VOLUME=./data
        SEQ_ApiKey=${{ secrets.SEQ_APIKEY }}
        " > .env
      working-directory: ./src

    - name: copy file
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.PROD_WEB_SERVER }}
        username: ${{ secrets.PROD_WEB_SERVER_USER }}
        port: ${{ secrets.PROD_WEB_SERVER_PORT }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "src/docker-compose.yml,src/docker-compose.prod.yml,src/.env"
        target: ${{ env.TARGET }}
        strip_components: 1
     
    - name: starting containers
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PROD_WEB_SERVER }}
        username: ${{ secrets.PROD_WEB_SERVER_USER }}
        port: ${{ secrets.PROD_WEB_SERVER_PORT }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script_stop: true
        script: |
          cd ${{ env.TARGET }}
          echo github registry login
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u DrifterApps --password-stdin
          echo start containers
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up --no-build --detach --force-recreate
          echo cleanup previous images
          docker image prune -f

  deploy:
    name: deploy to production
    runs-on: ubuntu-latest
    needs:
    - set-version
    - staging
    env:
      VERSION: ${{ needs.set-version.outputs.version }}
      TARGET: holefeeder-production
      ENVIRONMENT: Production
      HOLEFEEDER_EXTERNAL_DNS_NAME_OR_IP: holefeeder.drifterapps.com
    environment:
      name: production

    steps:
    - uses: actions/checkout@v2

    - name: create environment file
      run: |
        printf "VERSION=${{ env.VERSION }}
        DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
        ENVIRONMENT=${{ env.ENVIRONMENT }}
        ENVIRONMENT_PREFIX=${{ env.ENVIRONMENT_PREFIX }}
        HOLEFEEDER_EXTERNAL_DNS_NAME_OR_IP=${{ env.HOLEFEEDER_EXTERNAL_DNS_NAME_OR_IP }}
        MONGO_CONNECTION_STRING=mongodb://${{ secrets.MONGODB_HOLEFEEDERAPI_USER }}:${{ secrets.MONGODB_HOLEFEEDERAPI_PASSWORD }}@nosql-data/?authSource=holefeeder
        MONGO_ROOT_USER=${{ secrets.MONGODB_ROOT_USER }}
        MONGO_ROOT_PASSWORD=${{ secrets.MONGODB_ROOT_PASSWORD }}
        MONGO_DATABASE_NAME=holefeeder
        MONGO_DATABASE_VOLUME=./data
        SEQ_ApiKey=${{ secrets.SEQ_APIKEY }}
        " > .env
      working-directory: ./src

    - name: copy file
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.PROD_WEB_SERVER }}
        username: ${{ secrets.PROD_WEB_SERVER_USER }}
        port: ${{ secrets.PROD_WEB_SERVER_PORT }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "src/docker-compose.yml,src/docker-compose.prod.yml,src/.env"
        target: ${{ env.TARGET }}
        strip_components: 1
